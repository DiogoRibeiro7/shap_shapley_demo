[tool.poetry]
name = "shap-analytics"
version = "0.1.0"
description = "Professional SHAP value computation, analysis, and deployment toolkit"
authors = ["Diogo Ribeiro <dfr@esmad.ipp.pt>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/diogoribeiro7/shap-analytics"
repository = "https://github.com/diogoribeiro7/shap-analytics"
documentation = "https://diogoribeiro7.github.io/shap-analytics"
keywords = ["shap", "machine-learning", "explainability", "interpretability", "xai"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
packages = [
    { include = "shap_analytics", from = "src" }
]

[tool.poetry.dependencies]
python = "^3.10"
numpy = "^1.24.0"
pandas = "^2.0.0"
matplotlib = "^3.7.0"
scikit-learn = "^1.3.0"
shap = "^0.45.0"
scipy = "^1.11.0"
click = "^8.1.0"
fastapi = ">=0.120.1,<0.121"   # bump to a series compatible with newer Starlette
starlette = ">=0.47.2,<0.50.0" # explicit floor for security/compat
uvicorn = {extras = ["standard"], version = "^0.27.0"}  # keep as-is
pydantic = "^2.6.0"
pydantic-settings = "^2.1.0"
joblib = "^1.3.0"
mlflow = "^3.5.0rc0"
redis = {version = "^5.0.0", optional = true}
plotly = "^5.18.0"

[tool.poetry.group.dev.dependencies]
pytest = "^8.0.0"
pytest-cov = "^4.1.0"
pytest-asyncio = "^0.23.0"
pytest-mock = "^3.12.0"
mypy = "^1.8.0"
ruff = "^0.3.0"
pre-commit = "^3.6.0"
ipython = "^8.20.0"
jupyter = "^1.0.0"
types-click = "^7.1.8"
pandas-stubs = "^2.3.2.250926"
types-pyyaml = "^6.0.12.20250915"
types-jsonschema = "^4.25.1.20251009"
cryptography = "^46.0.3"

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.5.3"
mkdocs-material = "^9.5.0"
mkdocstrings = {extras = ["python"], version = "^0.24.0"}
pymdown-extensions = "^10.7.0"

[tool.poetry.scripts]
shap-analytics = "shap_analytics.shap_explain:main"

[tool.poetry.extras]
redis = ["redis"]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

# Ruff configuration
[tool.ruff]
target-version = "py310"
line-length = 100
indent-width = 4
# Ô£à Tell Ruff where your source tree starts so it can classify first-party imports
src = ["src"]

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "UP",     # pyupgrade
    "ARG",    # flake8-unused-arguments
    "SIM",    # flake8-simplify
    "TCH",    # flake8-type-checking
    "PTH",    # flake8-use-pathlib
    "RUF",    # Ruff-specific rules
]
ignore = [
    "E501",   # Line too long (handled by formatter)
    "B008",   # Function call in argument defaults
    "B905",   # zip without strict parameter
]

# Ô£à Mark your package as first-party for isort grouping
[tool.ruff.lint.isort]
known-first-party = ["shap_analytics"]
lines-between-types = 1

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # Unused imports in __init__.py
"tests/**/*.py" = ["ARG", "S101"]  # Unused args and assert in tests

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"

# MyPy configuration
[tool.mypy]
python_version = "3.10"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_unimported = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
check_untyped_defs = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
pretty = true

[[tool.mypy.overrides]]
module = [
    "shap.*",
    "sklearn.*",
    "scipy.*",
    "mlflow.*",
    "plotly.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src/shap_analytics",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
branch = true
parallel = true
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/site-packages/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]
